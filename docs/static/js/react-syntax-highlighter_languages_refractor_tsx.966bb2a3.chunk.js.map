{"version":3,"sources":["../node_modules/refractor/lang/typescript.js","../node_modules/refractor/lang/tsx.js"],"names":["typescript","Prism","languages","extend","pattern","lookbehind","greedy","inside","keyword","builtin","typeInside","insertBefore","function","generic","alias","ts","module","exports","displayName","aliases","refractorJsx","require","refractorTypescript","tsx","register","util","clone","tag","RegExp","source","flags"],"mappings":"0IAKA,SAASA,EAAWC,IACjB,SAAWA,GACVA,EAAMC,UAAUF,WAAaC,EAAMC,UAAUC,OAAO,aAAc,CAChE,aAAc,CACZC,QAAS,+KACTC,YAAY,EACZC,QAAQ,EACRC,OAAQ,MAGVC,QAAS,6ZACTC,QAAS,iGAEJR,EAAMC,UAAUF,WAAhB,UACP,IAAIU,EAAaT,EAAMC,UAAUC,OAAO,aAAc,WAC/CO,EAAW,cAClBT,EAAMC,UAAUF,WAAW,cAAcO,OAASG,EAClDT,EAAMC,UAAUS,aAAa,aAAc,WAAY,CACrD,mBAAoB,CAElBP,QAAS,yGACTE,QAAQ,EACRC,OAAQ,CACNK,SAAU,4DACVC,QAAS,CACPT,QAAS,WAETU,MAAO,aACPP,OAAQG,OAKhBT,EAAMC,UAAUa,GAAKd,EAAMC,UAAUF,WAhCtC,CAiCEC,GArCLe,EAAOC,QAAUjB,EACjBA,EAAWkB,YAAc,aACzBlB,EAAWmB,QAAU,CAAC,O,iCCHtB,IAAIC,EAAeC,EAAQ,KACvBC,EAAsBD,EAAQ,KAIlC,SAASE,EAAItB,GACXA,EAAMuB,SAASJ,GACfnB,EAAMuB,SAASF,GACd,SAAWrB,GACV,IAAID,EAAaC,EAAMwB,KAAKC,MAAMzB,EAAMC,UAAUF,YAClDC,EAAMC,UAAUqB,IAAMtB,EAAMC,UAAUC,OAAO,MAAOH,GAGpD,IAAI2B,EAAM1B,EAAMC,UAAUqB,IAAII,IAC9BA,EAAIvB,QAAUwB,OACZ,qBAAqBC,OAAS,MAAQF,EAAIvB,QAAQyB,OAAS,IAC3DF,EAAIvB,QAAQ0B,OAEdH,EAAItB,YAAa,EAVlB,CAWEJ,GAjBLe,EAAOC,QAAUM,EACjBA,EAAIL,YAAc,MAClBK,EAAIJ,QAAU","file":"static/js/react-syntax-highlighter_languages_refractor_tsx.966bb2a3.chunk.js","sourcesContent":["'use strict'\n\nmodule.exports = typescript\ntypescript.displayName = 'typescript'\ntypescript.aliases = ['ts']\nfunction typescript(Prism) {\n  ;(function (Prism) {\n    Prism.languages.typescript = Prism.languages.extend('javascript', {\n      'class-name': {\n        pattern: /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\n        lookbehind: true,\n        greedy: true,\n        inside: null // see below\n      },\n      // From JavaScript Prism keyword list and TypeScript language spec: https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#221-reserved-words\n      keyword: /\\b(?:abstract|as|asserts|async|await|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|is|keyof|let|module|namespace|new|null|of|package|private|protected|public|readonly|return|require|set|static|super|switch|this|throw|try|type|typeof|undefined|var|void|while|with|yield)\\b/,\n      builtin: /\\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\\b/\n    }) // doesn't work with TS because TS is too complex\n    delete Prism.languages.typescript['parameter'] // a version of typescript specifically for highlighting types\n    var typeInside = Prism.languages.extend('typescript', {})\n    delete typeInside['class-name']\n    Prism.languages.typescript['class-name'].inside = typeInside\n    Prism.languages.insertBefore('typescript', 'function', {\n      'generic-function': {\n        // e.g. foo<T extends \"bar\" | \"baz\">( ...\n        pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\n        greedy: true,\n        inside: {\n          function: /^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,\n          generic: {\n            pattern: /<[\\s\\S]+/,\n            // everything after the first <\n            alias: 'class-name',\n            inside: typeInside\n          }\n        }\n      }\n    })\n    Prism.languages.ts = Prism.languages.typescript\n  })(Prism)\n}\n","'use strict'\nvar refractorJsx = require('./jsx.js')\nvar refractorTypescript = require('./typescript.js')\nmodule.exports = tsx\ntsx.displayName = 'tsx'\ntsx.aliases = []\nfunction tsx(Prism) {\n  Prism.register(refractorJsx)\n  Prism.register(refractorTypescript)\n  ;(function (Prism) {\n    var typescript = Prism.util.clone(Prism.languages.typescript)\n    Prism.languages.tsx = Prism.languages.extend('jsx', typescript) // This will prevent collisions between TSX tags and TS generic types.\n    // Idea by https://github.com/karlhorky\n    // Discussion: https://github.com/PrismJS/prism/issues/2594#issuecomment-710666928\n    var tag = Prism.languages.tsx.tag\n    tag.pattern = RegExp(\n      /(^|[^\\w$]|(?=<\\/))/.source + '(?:' + tag.pattern.source + ')',\n      tag.pattern.flags\n    )\n    tag.lookbehind = true\n  })(Prism)\n}\n"],"sourceRoot":""}